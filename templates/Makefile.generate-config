include ../Make.user

CONFIG_DIR = $(STORE)/config
MODULE_DIR = $(SOFTWARE_STACK_PROJECT)/modules

# These will be the prefixes of the GCCs, LLVMs and NVHPCs in the respective environments.
ALL_COMPILER_PREFIXES ={% for compiler in all_compilers %} $$($(SPACK) -e ../compilers/{{ compiler }} find --format='{prefix}' gcc llvm nvhpc){% endfor %}


COMPILER_PREFIXES ={% for compiler in release_compilers %} $$($(SPACK) -e ../compilers/{{ compiler }} find --format='{prefix}' gcc llvm nvhpc){% endfor %}


all: $(CONFIG_DIR)/upstreams.yaml $(CONFIG_DIR)/compilers.yaml $(CONFIG_DIR)/packages.yaml $(MODULE_DIR)/upstreams.yaml $(MODULE_DIR)/compilers.yaml

# Generate the upstream configuration that will be provided by the mounted image
$(CONFIG_DIR)/compilers.yaml:
	$(SPACK) compiler find --scope=user $(call compiler_bin_dirs, $(COMPILER_PREFIXES))

$(CONFIG_DIR)/upstreams.yaml:
	$(SPACK) config --scope=user add upstreams:system:install_tree:$(STORE)

$(CONFIG_DIR)/packages.yaml:
	[[ -f $(SPACK_SYSTEM_CONFIG_PATH)/packages.yaml ]] \
    && cp $(SPACK_SYSTEM_CONFIG_PATH)/packages.yaml $(CONFIG_DIR)/packages.yaml

# Generate a configuration used to generate the module files
# The configuration in CONFIG_DIR can't be used for this purpose, because a compilers.yaml
# that includes the bootstrap compiler is required to build the modules.
$(MODULE_DIR)/compilers.yaml:
	$(SPACK) compiler find --scope=user $(call compiler_bin_dirs, $(ALL_COMPILER_PREFIXES))

$(MODULE_DIR)/upstreams.yaml:
	$(SPACK) config --scope=user add upstreams:system:install_tree:$(STORE)

include ../Make.inc
